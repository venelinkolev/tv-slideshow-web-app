import { Injectable, inject } from '@angular/core';
import { Observable, of, BehaviorSubject, interval, Subscription } from 'rxjs';
import { tap, switchMap, takeWhile, map } from 'rxjs/operators';

import { Product } from '@core/models/product.interface';
import { ProductTemplate } from '@core/models/template.interface';
import { SlideshowConfig } from '@core/models/slideshow-config.interface';
import { ProductApiService } from '@core/services/product-api.service';
import { ConfigService } from '@core/services/config.service';
import { TemplateRegistryService } from '@core/services/template-registry.service';
import { PerformanceMonitorService } from '@core/services/performance-monitor.service';
import { PerformanceLevel } from '@core/models/enums';

/**
 * SlideShowService —É–ø—Ä–∞–≤–ª—è–≤–∞ –ª–æ–≥–∏–∫–∞—Ç–∞ –Ω–∞ —Å–ª–∞–π–¥—à–æ—É, –≤–∫–ª—é—á–∏—Ç–µ–ª–Ω–æ –ø—Ä–µ—Ö–æ–¥–∏—Ç–µ –º–µ–∂–¥—É —Å–ª–∞–π–¥–æ–≤–µ,
 * —Ç–∞–π–º–µ—Ä–∏ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ç–∞ —Å—ä—Å —Å–µ—Ä–≤–∏–∑–∏—Ç–µ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –∏ —à–∞–±–ª–æ–Ω–∏.
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–∞–Ω –∑–∞ —Ä–∞–±–æ—Ç–∞ –Ω–∞ TV –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏.
 */
@Injectable({
    providedIn: 'root'
})
export class SlideShowService {
    // –ò–Ω–∂–µ–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å–µ—Ä–≤–∏—Å–∏ —Å –∏–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è—Ç–∞ inject
    private productApiService = inject(ProductApiService);
    private configService = inject(ConfigService);
    private templateRegistry = inject(TemplateRegistryService);
    private performanceMonitor = inject(PerformanceMonitorService);

    // –°—ä—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Å–ª–∞–π–¥—à–æ—É
    private currentSlideIndexSubject = new BehaviorSubject<number>(0);
    private runningSubject = new BehaviorSubject<boolean>(false);
    private timerSubscription?: Subscription;

    // –ü—É–±–ª–∏—á–Ω–∏ Observable
    readonly currentSlideIndex$ = this.currentSlideIndexSubject.asObservable();
    readonly isRunning$ = this.runningSubject.asObservable();

    /**
     * –ó–∞—Ä–µ–∂–¥–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ —Å –ø–æ–º–æ—â—Ç–∞ –Ω–∞ ProductApiService —Å–ø–æ—Ä–µ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
     */

    loadProducts(): Observable<Product[]> {
        console.log('üîÑ SlideShowService.loadProducts()');

        // Get configuration
        const config = this.configService.config();
        const selectedProductIds = config.products.selectedProductIds || [];
        const maxProducts = this.getMaxProductCountSafe();

        return this.productApiService.getProducts().pipe(
            map((products: Product[]) => {
                console.log(`‚úÖ Received ${products.length} products from API`);

                // ‚úÖ FILTER: Only show selected products from admin panel
                let filteredProducts: Product[];

                if (selectedProductIds.length > 0) {
                    // Show ONLY selected products
                    filteredProducts = products.filter(p => selectedProductIds.includes(p.id));
                    console.log(`üéØ Filtered to ${filteredProducts.length} selected products (from ${selectedProductIds.length} IDs)`);
                } else {
                    // No selection = show first N products (fallback)
                    filteredProducts = products.slice(0, maxProducts);
                    console.log(`‚ö†Ô∏è No products selected in admin, showing first ${filteredProducts.length}`);
                }

                return filteredProducts;
            }),
            tap((products: Product[]) => {
                console.log(`‚úÖ SlideShow will display ${products.length} products`);
            })
        );
    }

    // loadProducts(): Observable<Product[]> {
    //     console.log('üîÑ SlideShowService.loadProducts()');
    //     // –ü–æ–ª—É—á–∞–≤–∞–º–µ –ª–∏–º–∏—Ç –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
    //     const maxProducts = this.getMaxProductCount();

    //     return this.productApiService.getProducts().pipe(
    //         tap((products: Product[]) => {
    //             console.log(`‚úÖ –ó–∞—Ä–µ–¥–µ–Ω–∏ ${products.length} –ø—Ä–æ–¥—É–∫—Ç–∞`);

    //             // –û–≥—Ä–∞–Ω–∏—á–∞–≤–∞–º–µ –±—Ä–æ—è –ø—Ä–æ–¥—É–∫—Ç–∏, –∞–∫–æ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –ª–∏–º–∏—Ç–∞ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
    //             if (products.length > maxProducts) {
    //                 console.log(`‚ö†Ô∏è –ë—Ä–æ—è—Ç –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω–∞–¥–≤–∏—à–∞–≤–∞ –ª–∏–º–∏—Ç–∞ (${maxProducts}), –æ—Ç—Ä—è–∑–≤–∞–º–µ –¥–æ –ª–∏–º–∏—Ç–∞`);
    //             }
    //         })
    //     );
    // }

    /**
     * –ó–∞—Ä–µ–∂–¥–∞ —à–∞–±–ª–æ–Ω –ø–æ ID
     */
    loadTemplate(templateId: string): Observable<ProductTemplate | null> {
        console.log(`üé® SlideShowService.loadTemplate(${templateId})`);
        return this.templateRegistry.getTemplate(templateId);
    }

    /**
     * –°—Ç–∞—Ä—Ç–∏—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–ª–∞–π–¥—à–æ—É
     */
    startSlideShow(): void {
        console.log('‚ñ∂Ô∏è SlideShowService.startSlideShow()');
        if (this.runningSubject.value) {
            console.log('‚ö†Ô∏è –°–ª–∞–π–¥—à–æ—É—Ç–æ –≤–µ—á–µ –µ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–æ');
            return;
        }

        // –ü–æ–ª—É—á–∞–≤–∞–º–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        const slideInterval = this.getSlideInterval();
        console.log(`üìä –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ —Å–ª–∞–π–¥—à–æ—É: ${slideInterval}ms`);

        this.runningSubject.next(true);

        // –°—ä–∑–¥–∞–≤–∞–º–µ —Ç–∞–π–º–µ—Ä –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–µ–≤–∫–ª—é—á–≤–∞–Ω–µ –Ω–∞ —Å–ª–∞–π–¥–æ–≤–µ
        this.timerSubscription = interval(slideInterval).pipe(
            takeWhile(() => this.runningSubject.value)
        ).subscribe(() => {
            const currentIndex = this.currentSlideIndexSubject.value;
            // –¢—ä–π –∫–∞—Ç–æ –Ω—è–º–∞–º–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –æ–±—â–∏—è –±—Ä–æ–π —Å–ª–∞–π–¥–æ–≤–µ —Ç—É–∫,
            // –ø—Ä–æ—Å—Ç–æ —â–µ –∏–∑–≤—ä—Ä—à–∏–º –æ–ø–µ—Ä–∞—Ü–∏—è—Ç–∞ nextSlide
            this.nextSlide(10); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–º–µ –º–∞–∫—Å–∏–º—É–º 10 —Å–ª–∞–π–¥–∞ –∫–∞—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ–Ω —Å–ª—É—á–∞–π
        });
    }

    /**
     * –°–ø–∏—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Ç–æ —Å–ª–∞–π–¥—à–æ—É
     */
    stopSlideShow(): void {
        console.log('‚èπÔ∏è SlideShowService.stopSlideShow()');
        if (!this.runningSubject.value) {
            console.log('‚ö†Ô∏è –°–ª–∞–π–¥—à–æ—É—Ç–æ –≤–µ—á–µ –µ —Å–ø—Ä—è–Ω–æ');
            return;
        }

        this.runningSubject.next(false);

        if (this.timerSubscription) {
            this.timerSubscription.unsubscribe();
            this.timerSubscription = undefined;
        }
    }

    /**
     * –ü—Ä–µ–≤–∫–ª—é—á–≤–∞ –∫—ä–º —Å–ª–µ–¥–≤–∞—â–∏—è —Å–ª–∞–π–¥
     */
    nextSlide(totalSlides: number): void {
        console.log('‚è≠Ô∏è SlideShowService.nextSlide()');
        const currentIndex = this.currentSlideIndexSubject.value;
        const nextIndex = this.getNextSlideIndex(currentIndex, totalSlides);
        this.currentSlideIndexSubject.next(nextIndex);
    }

    /**
     * –ü—Ä–µ–≤–∫–ª—é—á–≤–∞ –∫—ä–º –ø—Ä–µ–¥–∏—à–Ω–∏—è —Å–ª–∞–π–¥
     */
    previousSlide(totalSlides: number): void {
        console.log('‚èÆÔ∏è SlideShowService.previousSlide()');
        const currentIndex = this.currentSlideIndexSubject.value;
        const prevIndex = this.getPreviousSlideIndex(currentIndex, totalSlides);
        this.currentSlideIndexSubject.next(prevIndex);
    }

    /**
     * –û—Ç–∏–≤–∞ –∫—ä–º –ø–æ—Å–æ—á–µ–Ω–∏—è —Å–ª–∞–π–¥
     */
    goToSlide(slideIndex: number, totalSlides: number): void {
        console.log(`üéØ SlideShowService.goToSlide(${slideIndex})`);
        const validIndex = this.validateSlideIndex(slideIndex, totalSlides);
        this.currentSlideIndexSubject.next(validIndex);
    }

    /**
     * –û–±–Ω–æ–≤—è–≤–∞ –¥–∞–Ω–Ω–∏—Ç–µ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –∏ —à–∞–±–ª–æ–Ω–∏
     */
    refreshData(): Observable<Product[]> {
        console.log('üîÑ SlideShowService.refreshData()');
        return this.loadProducts();
    }

    /**
     * –ò–∑—á–∏—Å–ª—è–≤–∞ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ —Å–ª–µ–¥–≤–∞—â–∏—è —Å–ª–∞–π–¥ —Å –æ—Ç—á–∏—Ç–∞–Ω–µ –Ω–∞ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç
     */
    getNextSlideIndex(currentIndex: number, totalSlides: number): number {
        if (totalSlides <= 1) return 0;
        return (currentIndex + 1) % totalSlides;
    }

    /**
     * –ò–∑—á–∏—Å–ª—è–≤–∞ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ –ø—Ä–µ–¥–∏—à–Ω–∏—è —Å–ª–∞–π–¥ —Å –æ—Ç—á–∏—Ç–∞–Ω–µ –Ω–∞ —Ü–∏–∫–ª–∏—á–Ω–æ—Å—Ç
     */
    getPreviousSlideIndex(currentIndex: number, totalSlides: number): number {
        if (totalSlides <= 1) return 0;
        return currentIndex === 0 ? totalSlides - 1 : currentIndex - 1;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ –∏–Ω–¥–µ–∫—Å–∞ –∏ –∫–æ—Ä–∏–≥–∏—Ä–∞, –∞–∫–æ –∏–∑–ª–∏–∑–∞ –∏–∑–≤—ä–Ω –≥—Ä–∞–Ω–∏—Ü–∏—Ç–µ
     */
    validateSlideIndex(index: number, totalSlides: number): number {
        if (totalSlides === 0) return 0;
        if (index < 0) return 0;
        if (index >= totalSlides) return totalSlides - 1;
        return index;
    }

    /**
     * –ò–∑—á–∏—Å–ª—è–≤–∞ –ø—Ä–æ–≥—Ä–µ—Å–∞ –Ω–∞ —Å–ª–∞–π–¥—à–æ—É—Ç–æ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∏
     */
    calculateProgress(currentIndex: number, totalSlides: number): number {
        if (totalSlides <= 1) return 100;
        return ((currentIndex + 1) / totalSlides) * 100;
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞ —Å–º—è–Ω–∞ –Ω–∞ —Å–ª–∞–π–¥–æ–≤–µ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
     */
    getSlideInterval(): number {
        return this.configService.slideDuration();
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –º–∞–∫—Å–∏–º–∞–ª–µ–Ω –±—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
     */
    getMaxProductCount(): number {
        // –ü–æ–ª—É—á–∞–≤–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ç–∞
        const config = this.configService.config();
        // –í—Ä—ä—â–∞–º–µ –º–∞–∫—Å–∏–º–∞–ª–µ–Ω –±—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏ –∏–ª–∏ 10 –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ
        return config?.products?.maxProducts ?? 10;
    }

    /**
     * –ü–æ–ª—É—á–∞–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞ —Ç–∞–π–º–∏–Ω–≥ –Ω–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    getSlideTimings(): { interval: number; transition: number; pause: number } {
        const interval = this.getSlideInterval();
        const timings = {
            interval: interval,
            transition: Math.min(1000, interval * 0.1), // 10% –æ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞, –º–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞
            pause: 500 // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ª–∞–π–¥–æ–≤–µ
        };

        return timings;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –¥–∞–ª–∏ —Å–ª–∞–π–¥—à–æ—É—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –≤—ä—Ä—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
     */
    shouldAutoRotate(): boolean {
        const config = this.configService.config();
        return config?.general?.autoStart ?? true;
    }

    /**
 * Get max product count with safe fallback
 */
    private getMaxProductCountSafe(): number {
        try {
            return this.getMaxProductCount();
        } catch (error) {
            console.warn('‚ö†Ô∏è Could not get max product count, using fallback of 10');
            return 10;
        }
    }
}